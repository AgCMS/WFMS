{"ast":null,"code":"// authServices.js\n\nconst TOKEN_KEY = 'token'; // Key for storing JWT token in localStorage\n\n/**\r\n * Save the token to localStorage\r\n * @param {string} token - JWT token to be stored\r\n */\nexport const setToken = token => {\n  localStorage.setItem(TOKEN_KEY, token);\n};\n\n/**\r\n * Retrieve the token from localStorage\r\n * @returns {string|null} - The JWT token or null if it doesn't exist\r\n */\nexport const getToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\r\n * Remove the token from localStorage (Used for logout)\r\n */\nexport const removeToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\n/**\r\n * Check if the user is authenticated by verifying if a token exists\r\n * @returns {boolean} - Returns true if token exists, false otherwise\r\n */\nexport const isAuthenticated = () => {\n  const token = getToken();\n  return token ? true : false;\n};\n\n/**\r\n * Decode JWT token to get user information (optional)\r\n * You may need to install 'jwt-decode' library to use this feature\r\n * @param {string} token - JWT token to be decoded\r\n * @returns {object|null} - Returns the decoded token payload or null if not valid\r\n */\nexport const decodeToken = token => {\n  try {\n    const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode the payload\n    return decodedToken;\n  } catch (error) {\n    console.error('Invalid token:', error);\n    return null;\n  }\n};\n\n// Export all functions under one authService object\nconst authService = {\n  setToken,\n  getToken,\n  removeToken,\n  isAuthenticated,\n  decodeToken\n};\nexport default authService;","map":{"version":3,"names":["TOKEN_KEY","setToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","isAuthenticated","decodeToken","decodedToken","JSON","parse","atob","split","error","console","authService"],"sources":["C:/Users/agya_gupta/Downloads/WFM/frontend/src/services/authService.js"],"sourcesContent":["// authServices.js\r\n\r\nconst TOKEN_KEY = 'token'; // Key for storing JWT token in localStorage\r\n\r\n/**\r\n * Save the token to localStorage\r\n * @param {string} token - JWT token to be stored\r\n */\r\nexport const setToken = (token) => {\r\n  localStorage.setItem(TOKEN_KEY, token);\r\n};\r\n\r\n/**\r\n * Retrieve the token from localStorage\r\n * @returns {string|null} - The JWT token or null if it doesn't exist\r\n */\r\nexport const getToken = () => {\r\n  return localStorage.getItem(TOKEN_KEY);\r\n};\r\n\r\n/**\r\n * Remove the token from localStorage (Used for logout)\r\n */\r\nexport const removeToken = () => {\r\n  localStorage.removeItem(TOKEN_KEY);\r\n};\r\n\r\n/**\r\n * Check if the user is authenticated by verifying if a token exists\r\n * @returns {boolean} - Returns true if token exists, false otherwise\r\n */\r\nexport const isAuthenticated = () => {\r\n  const token = getToken();\r\n  return token ? true : false;\r\n};\r\n\r\n/**\r\n * Decode JWT token to get user information (optional)\r\n * You may need to install 'jwt-decode' library to use this feature\r\n * @param {string} token - JWT token to be decoded\r\n * @returns {object|null} - Returns the decoded token payload or null if not valid\r\n */\r\nexport const decodeToken = (token) => {\r\n  try {\r\n    const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode the payload\r\n    return decodedToken;\r\n  } catch (error) {\r\n    console.error('Invalid token:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Export all functions under one authService object\r\nconst authService = {\r\n  setToken,\r\n  getToken,\r\n  removeToken,\r\n  isAuthenticated,\r\n  decodeToken,\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAG,OAAO,CAAC,CAAC;;AAE3B;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EACjCC,YAAY,CAACC,OAAO,CAACJ,SAAS,EAAEE,KAAK,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAOF,YAAY,CAACG,OAAO,CAACN,SAAS,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMO,WAAW,GAAGA,CAAA,KAAM;EAC/BJ,YAAY,CAACK,UAAU,CAACR,SAAS,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMS,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMP,KAAK,GAAGG,QAAQ,CAAC,CAAC;EACxB,OAAOH,KAAK,GAAG,IAAI,GAAG,KAAK;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAIR,KAAK,IAAK;EACpC,IAAI;IACF,MAAMS,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACZ,KAAK,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,OAAOJ,YAAY;EACrB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAME,WAAW,GAAG;EAClBjB,QAAQ;EACRI,QAAQ;EACRE,WAAW;EACXE,eAAe;EACfC;AACF,CAAC;AAED,eAAeQ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}